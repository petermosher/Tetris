package util;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
//import java.io.File;

import javax.swing.JFrame;
//import javax.swing.JMenu;
//import javax.swing.JMenuBar;
//import javax.swing.JPanel;

import tetris.entities.Board;

/**
 * music and audio
 */
//import audio.sounds.MusicPlayer;

//import com.sun.media.codec.audio.mp3.JavaDecoder;
//import javax.media.Codec;
//import javax.media.PlugInManager;

/**
 * Frame object that contains the panels to run a tetris game.
 * @author Pete
 * @version 42
 */
public class Frame extends JFrame {

  /**
    * generated serial.
    */
  private static final long serialVersionUID = 1992885822969025989L;
/**
   * Keylistener for key inputs of tetris game.
   */
  private final KeyListener my_kl = new KeyListener();
  /**
   * Creates the tetris board.
   */
  private final Board my_b = new Board(20, (int) 10, System.nanoTime());
  /**
   * creates the tetris panel.
   */
  private final TetrisPanel my_p = new TetrisPanel(my_b);
  /**
   * creates the panel that displays the next piece.
   */
  private final NextPiecePanel my_p2 = new NextPiecePanel(my_b);
  /**
   * creates the panel that displays the controls for the game.
   */
  private final InstructionsPanel my_instructions = new InstructionsPanel();
  /**
   * panel keeps track of score.
   */
  private final ScorePanel my_score = new ScorePanel(my_b);
  /**
   * controls pausing in the game.
   */
  private boolean my_pause;

  /**
   * creates the frame object.
   */
  public Frame() {
    super();
    start();
  }

/**
   * Runs the main code.
   * @param an_args array of Strings: execution code.
   */
  public static void main(final String[] an_args) {
    new Frame();
  }

  /**
   * Does the preliminary setup steps of the program.
   */
  public void start() {
    final JFrame frame = new JFrame("Tetris");
    my_p.setBackground(Color.black);
    my_p2.setBackground(Color.white);
    my_p2.setPreferredSize(new Dimension(150, 150));
    my_p.setPreferredSize(new Dimension(200, 400));
    my_p.addKeyListener(my_kl);
    my_score.setPreferredSize(new Dimension(120, 120));
    frame.add(my_score, new BorderLayout().EAST);
    frame.add(my_p2, new BorderLayout().SOUTH);
    my_instructions.setBackground(Color.pink);
    my_instructions.setPreferredSize(new Dimension(300, 130)); /*width, height*/
    frame.add(my_instructions, new BorderLayout().NORTH);
    frame.add(my_p, new BorderLayout().CENTER);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setVisible(true);
    frame.pack();
    my_p.requestFocus(); /*has to be after pack*/
  }
  
  /**
   * returns the state of pause.
   * @return the state of pause.
   */
  public boolean isPaused() {
    return my_pause;
  }
  
  /**
   * flips the pause boolean.
   */
  public void flipPause() {
    if (my_pause) {
      my_pause = false;
      if (!my_p.getTimer().isRunning()) {
        my_p.getTimer().start();
        /*Maybe update the Panel*/

      }
    } else {
      my_pause = true;
      my_p.getTimer().stop();
      my_p.repaint();
    }
  }
  
  /**
   * Moves the pieces when the user hits the cooresponding key.
   * @author Pete
   *
   */
  private class KeyListener extends KeyAdapter {
 
    /**
     * Handles a key being typed.
     * 
     * @param the_event The KeyEvent generated by the key.
     */  
    public void keyPressed(final KeyEvent the_event) {
      if (the_event.getKeyCode() == the_event.VK_LEFT && !my_b.isFull() && !isPaused()) {
        my_p.getB().moveLeft();
      } else if (the_event.getKeyCode() == the_event.VK_RIGHT && 
        !my_b.isFull() && !isPaused()) {
        my_p.getB().moveRight();
      } else if (the_event.getKeyCode() == the_event.VK_DOWN && /*down is now rotate*/
        !my_b.isFull() && !isPaused()) {
        my_p.getB().rotateCounterclockwise(); 
      } else if (the_event.getKeyCode() == the_event.VK_UP && 
        !my_b.isFull() && !isPaused()) {
        my_p.getB().rotateClockwise();
      } else if (the_event.getKeyCode() == the_event.VK_SPACE && 
        !my_b.isFull() && !isPaused()) {
        my_p.getB().drop();
      } else if (the_event.getKeyCode() == the_event.VK_P && !my_b.isFull()) {
        flipPause();
      } else if (the_event.getKeyCode() == the_event.VK_1 && 
        !my_b.isFull() && !isPaused()) {
          /*jump left*/
        int i = 0;
        while (i++ < 5) {
          my_p.getB().moveLeft();
        }
      } else if (the_event.getKeyCode() == the_event.VK_2 && 
        !my_b.isFull() && !isPaused()) {
            /*jump down*/
        int i = 0;
        while (i++ < 5) {
          my_p.getB().moveDown();
        }
      } else if (the_event.getKeyCode() == the_event.VK_3 && 
        !my_b.isFull() && !isPaused()) {
              /*jump right*/
        int i = 0;
        while (i++ < 5) {
          my_p.getB().moveRight();
        }
      } else if (the_event.getKeyCode() == the_event.VK_0) {
        System.out.println("Its your logic");
      }
    }
  }
}
